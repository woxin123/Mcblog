<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 🌟行者 博客</title>
    <link>https://blog.mengchen.online/categories/Java/</link>
    <description>Recent content in Java on 🌟行者 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 09 Feb 2019 17:29:36 +0800</lastBuildDate>
    
	<atom:link href="https://blog.mengchen.online/categories/Java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于Java中的传参是值传递还是引用传递</title>
      <link>https://blog.mengchen.online/post/%E5%85%B3%E4%BA%8EJava%E4%B8%AD%E7%9A%84%E4%BC%A0%E5%8F%82%E6%98%AF%E5%80%BC%E4%BC%A0%E9%80%92%E8%BF%98%E6%98%AF%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</link>
      <pubDate>Sat, 09 Feb 2019 17:29:36 +0800</pubDate>
      
      <guid>https://blog.mengchen.online/post/%E5%85%B3%E4%BA%8EJava%E4%B8%AD%E7%9A%84%E4%BC%A0%E5%8F%82%E6%98%AF%E5%80%BC%E4%BC%A0%E9%80%92%E8%BF%98%E6%98%AF%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</guid>
      <description>在Java中其实只有值传递，而没有所谓的引用传递。既然Java中没有引用传递，那么到底什么才是引用传递呢？ 在C++中是有引用传递的，下来我们来看一个简单的小程序，如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;iostream&amp;gt;using namespace std; int changeXtoY(int &amp;amp;x, int y) { x = y; } int main() { int a = 2; changeXtoY(a, 4); cout &amp;lt;&amp;lt; &amp;#34;a=&amp;#34; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl; return 0; } 运行的结果是a = 4，</description>
    </item>
    
    <item>
      <title>Java 并发之无锁</title>
      <link>https://blog.mengchen.online/post/Java%E5%B9%B6%E5%8F%91%E4%B9%8B%E6%97%A0%E9%94%81/</link>
      <pubDate>Tue, 09 Oct 2018 17:15:00 +0800</pubDate>
      
      <guid>https://blog.mengchen.online/post/Java%E5%B9%B6%E5%8F%91%E4%B9%8B%E6%97%A0%E9%94%81/</guid>
      <description>Java并发编程之无锁 在谈论无所之前先来看看乐观派和悲观派。对于乐观派而言，他们总认为事情总会朝着好的方向发展，总认为几乎不会坏事，我已可以随意的去做事。但是对于悲观派来说，他们认为出错是一种常态，所以无论事情大小都会考虑的面面俱到，滴水不漏。 在两种派别对应在并发中就是加锁和无锁</description>
    </item>
    
  </channel>
</rss>